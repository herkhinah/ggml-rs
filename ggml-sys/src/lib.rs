/* automatically generated by rust-bindgen 0.69.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]
pub const GGMLSYS_VERSION: Option<&str> = option_env!("CARGO_PKG_VERSION");

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    pub type ggml_fp16_t = u16;
    pub type ggml_unary_op_f32_t = ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut f32, arg3: *const f32),
    >;
    pub type ggml_binary_op_f32_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut f32,
            arg3: *const f32,
            arg4: *const f32,
        ),
    >;
    pub type ggml_custom1_op_f32_t = ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut root::ggml_tensor, arg2: *const root::ggml_tensor),
    >;
    pub type ggml_custom2_op_f32_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut root::ggml_tensor,
            arg2: *const root::ggml_tensor,
            arg3: *const root::ggml_tensor,
        ),
    >;
    pub type ggml_custom3_op_f32_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut root::ggml_tensor,
            arg2: *const root::ggml_tensor,
            arg3: *const root::ggml_tensor,
            arg4: *const root::ggml_tensor,
        ),
    >;
    pub type ggml_custom1_op_t = ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut root::ggml_tensor,
            a: *const root::ggml_tensor,
            ith: ::std::os::raw::c_int,
            nth: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type ggml_custom2_op_t = ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut root::ggml_tensor,
            a: *const root::ggml_tensor,
            b: *const root::ggml_tensor,
            ith: ::std::os::raw::c_int,
            nth: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type ggml_custom3_op_t = ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut root::ggml_tensor,
            a: *const root::ggml_tensor,
            b: *const root::ggml_tensor,
            c: *const root::ggml_tensor,
            ith: ::std::os::raw::c_int,
            nth: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type ggml_opt_callback = ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            accum_step: ::std::os::raw::c_int,
            sched: *mut f32,
            cancel: *mut bool,
        ),
    >;
    pub type ggml_log_callback = ::std::option::Option<
        unsafe extern "C" fn(
            level: root::ggml_log_level,
            text: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >;
    pub type ggml_to_float_t = ::std::option::Option<
        unsafe extern "C" fn(
            x: *const ::std::os::raw::c_void,
            y: *mut f32,
            k: ::std::os::raw::c_int,
        ),
    >;
    pub type ggml_from_float_t = ::std::option::Option<
        unsafe extern "C" fn(
            x: *const f32,
            y: *mut ::std::os::raw::c_void,
            k: ::std::os::raw::c_int,
        ),
    >;
    pub type ggml_vec_dot_t = ::std::option::Option<
        unsafe extern "C" fn(
            n: ::std::os::raw::c_int,
            s: *mut f32,
            x: *const ::std::os::raw::c_void,
            y: *const ::std::os::raw::c_void,
        ),
    >;
    pub type ggml_allocr_t = *mut root::ggml_allocr;
    pub type ggml_tallocr_t = *mut root::ggml_tallocr;
    pub type ggml_gallocr_t = *mut root::ggml_gallocr;
    pub type ggml_backend_buffer_type_t = *mut root::ggml_backend_buffer_type;
    pub type ggml_backend_buffer_t = *mut root::ggml_backend_buffer;
    pub type ggml_backend_t = *mut root::ggml_backend;
    pub type ggml_backend_graph_plan_t = *mut ::std::os::raw::c_void;
    pub type ggml_backend_sched_t = *mut root::ggml_backend_sched;
    pub type ggml_backend_eval_callback = ::std::option::Option<
        unsafe extern "C" fn(
            node_index: ::std::os::raw::c_int,
            t1: *mut root::ggml_tensor,
            t2: *mut root::ggml_tensor,
            user_data: *mut ::std::os::raw::c_void,
        ) -> bool,
    >;
    pub type ggml_backend_buffer_type_context_t = *mut ::std::os::raw::c_void;
    pub type ggml_backend_buffer_context_t = *mut ::std::os::raw::c_void;
    pub type ggml_backend_context_t = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_object {
        pub offs: usize,
        pub size: usize,
        pub next: *mut root::ggml_object,
        pub type_: root::ggml_object_type,
        pub padding: [::std::os::raw::c_char; 4usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_tensor {
        pub type_: root::ggml_type,
        pub backend: root::ggml_backend_type,
        pub buffer: *mut root::ggml_backend_buffer,
        pub ne: [i64; 4usize],
        pub nb: [usize; 4usize],
        pub op: root::ggml_op,
        pub op_params: [i32; 16usize],
        pub is_param: bool,
        pub grad: *mut root::ggml_tensor,
        pub src: [*mut root::ggml_tensor; 10usize],
        pub perf_runs: ::std::os::raw::c_int,
        pub perf_cycles: i64,
        pub perf_time_us: i64,
        pub view_src: *mut root::ggml_tensor,
        pub view_offs: usize,
        pub data: *mut ::std::os::raw::c_void,
        pub name: [::std::os::raw::c_char; 64usize],
        pub extra: *mut ::std::os::raw::c_void,
        pub padding: [::std::os::raw::c_char; 8usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_cplan {
        pub work_size: usize,
        pub work_data: *mut u8,
        pub n_threads: ::std::os::raw::c_int,
        pub abort_callback:
            ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> bool>,
        pub abort_callback_data: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_hash_set {
        pub size: usize,
        pub keys: *mut *mut root::ggml_tensor,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_cgraph {
        pub size: ::std::os::raw::c_int,
        pub n_nodes: ::std::os::raw::c_int,
        pub n_leafs: ::std::os::raw::c_int,
        pub nodes: *mut *mut root::ggml_tensor,
        pub grads: *mut *mut root::ggml_tensor,
        pub leafs: *mut *mut root::ggml_tensor,
        pub visited_hash_table: root::ggml_hash_set,
        pub order: root::ggml_cgraph_eval_order,
        pub perf_runs: ::std::os::raw::c_int,
        pub perf_cycles: i64,
        pub perf_time_us: i64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_scratch {
        pub offs: usize,
        pub size: usize,
        pub data: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_init_params {
        pub mem_size: usize,
        pub mem_buffer: *mut ::std::os::raw::c_void,
        pub no_alloc: bool,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_compute_params {
        pub type_: root::ggml_task_type,
        pub ith: ::std::os::raw::c_int,
        pub nth: ::std::os::raw::c_int,
        pub wsize: usize,
        pub wdata: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_params {
        pub type_: root::ggml_opt_type,
        pub graph_size: usize,
        pub n_threads: ::std::os::raw::c_int,
        pub past: ::std::os::raw::c_int,
        pub delta: f32,
        pub max_no_improvement: ::std::os::raw::c_int,
        pub print_forward_graph: bool,
        pub print_backward_graph: bool,
        pub n_gradient_accumulation: ::std::os::raw::c_int,
        pub adam: root::ggml_opt_params__bindgen_ty_1,
        pub lbfgs: root::ggml_opt_params__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_params__bindgen_ty_1 {
        pub n_iter: ::std::os::raw::c_int,
        pub sched: f32,
        pub decay: f32,
        pub decay_min_ndim: ::std::os::raw::c_int,
        pub alpha: f32,
        pub beta1: f32,
        pub beta2: f32,
        pub eps: f32,
        pub eps_f: f32,
        pub eps_g: f32,
        pub gclip: f32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_params__bindgen_ty_2 {
        pub m: ::std::os::raw::c_int,
        pub n_iter: ::std::os::raw::c_int,
        pub max_linesearch: ::std::os::raw::c_int,
        pub eps: f32,
        pub ftol: f32,
        pub wolfe: f32,
        pub min_step: f32,
        pub max_step: f32,
        pub linesearch: root::ggml_linesearch,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_context {
        pub ctx: *mut root::ggml_context,
        pub params: root::ggml_opt_params,
        pub iter: ::std::os::raw::c_int,
        pub nx: i64,
        pub just_initialized: bool,
        pub loss_before: f32,
        pub loss_after: f32,
        pub adam: root::ggml_opt_context__bindgen_ty_1,
        pub lbfgs: root::ggml_opt_context__bindgen_ty_2,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_context__bindgen_ty_1 {
        pub g: *mut root::ggml_tensor,
        pub m: *mut root::ggml_tensor,
        pub v: *mut root::ggml_tensor,
        pub pf: *mut root::ggml_tensor,
        pub fx_best: f32,
        pub fx_prev: f32,
        pub n_no_improvement: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
    pub struct ggml_opt_context__bindgen_ty_2 {
        pub x: *mut root::ggml_tensor,
        pub xp: *mut root::ggml_tensor,
        pub g: *mut root::ggml_tensor,
        pub gp: *mut root::ggml_tensor,
        pub d: *mut root::ggml_tensor,
        pub pf: *mut root::ggml_tensor,
        pub lmal: *mut root::ggml_tensor,
        pub lmys: *mut root::ggml_tensor,
        pub lms: *mut root::ggml_tensor,
        pub lmy: *mut root::ggml_tensor,
        pub fx_best: f32,
        pub step: f32,
        pub j: ::std::os::raw::c_int,
        pub k: ::std::os::raw::c_int,
        pub end: ::std::os::raw::c_int,
        pub n_no_improvement: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_init_params {
        pub no_alloc: bool,
        pub ctx: *mut *mut root::ggml_context,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_type_traits_t {
        pub type_name: *const ::std::os::raw::c_char,
        pub blck_size: ::std::os::raw::c_int,
        pub type_size: usize,
        pub is_quantized: bool,
        pub to_float: root::ggml_to_float_t,
        pub from_float: root::ggml_from_float_t,
        pub from_float_reference: root::ggml_from_float_t,
        pub vec_dot: root::ggml_vec_dot_t,
        pub vec_dot_type: root::ggml_type,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ggml_allocr {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ggml_tallocr {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ggml_gallocr {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ggml_backend_sched {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_graph_copy {
        pub buffer: root::ggml_backend_buffer_t,
        pub ctx_allocated: *mut root::ggml_context,
        pub ctx_unallocated: *mut root::ggml_context,
        pub graph: *mut root::ggml_cgraph,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_context {
        pub mem_size: usize,
        pub mem_buffer: *mut ::std::os::raw::c_void,
        pub mem_buffer_owned: bool,
        pub no_alloc: bool,
        pub no_alloc_save: bool,
        pub n_objects: ::std::os::raw::c_int,
        pub objects_begin: *mut root::ggml_object,
        pub objects_end: *mut root::ggml_object,
        pub scratch: root::ggml_scratch,
        pub scratch_save: root::ggml_scratch,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_str {
        pub n: u64,
        pub data: *mut ::std::os::raw::c_char,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_value__bindgen_ty_1 {
        pub type_: root::gguf_type,
        pub n: u64,
        pub data: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct gguf_kv {
        pub key: root::gguf_str,
        pub type_: root::gguf_type,
        pub value: root::gguf_value,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_header {
        pub magic: [::std::os::raw::c_char; 4usize],
        pub version: u32,
        pub n_tensors: u64,
        pub n_kv: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_tensor_info {
        pub name: root::gguf_str,
        pub n_dims: u32,
        pub ne: [u64; 4usize],
        pub type_: root::ggml_type,
        pub offset: u64,
        pub data: *const ::std::os::raw::c_void,
        pub size: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct gguf_context {
        pub header: root::gguf_header,
        pub kv: *mut root::gguf_kv,
        pub infos: *mut root::gguf_tensor_info,
        pub alignment: usize,
        pub offset: usize,
        pub size: usize,
        pub data: *mut ::std::os::raw::c_void,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_buffer_type_i {
        pub alloc_buffer: ::std::option::Option<
            unsafe extern "C" fn(
                buft: root::ggml_backend_buffer_type_t,
                size: usize,
            ) -> root::ggml_backend_buffer_t,
        >,
        pub get_alignment: ::std::option::Option<
            unsafe extern "C" fn(buft: root::ggml_backend_buffer_type_t) -> usize,
        >,
        pub get_alloc_size: ::std::option::Option<
            unsafe extern "C" fn(
                buft: root::ggml_backend_buffer_type_t,
                tensor: *mut root::ggml_tensor,
            ) -> usize,
        >,
        pub supports_backend: ::std::option::Option<
            unsafe extern "C" fn(
                buft: root::ggml_backend_buffer_type_t,
                backend: root::ggml_backend_t,
            ) -> bool,
        >,
        pub is_host: ::std::option::Option<
            unsafe extern "C" fn(buft: root::ggml_backend_buffer_type_t) -> bool,
        >,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_buffer_type {
        pub iface: root::ggml_backend_buffer_type_i,
        pub context: root::ggml_backend_buffer_type_context_t,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_buffer_i {
        pub free_buffer:
            ::std::option::Option<unsafe extern "C" fn(buffer: root::ggml_backend_buffer_t)>,
        pub get_base: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        pub init_tensor: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
                tensor: *mut root::ggml_tensor,
            ),
        >,
        pub set_tensor: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
                tensor: *mut root::ggml_tensor,
                data: *const ::std::os::raw::c_void,
                offset: usize,
                size: usize,
            ),
        >,
        pub get_tensor: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
                tensor: *const root::ggml_tensor,
                data: *mut ::std::os::raw::c_void,
                offset: usize,
                size: usize,
            ),
        >,
        pub cpy_tensor_from: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
                src: *mut root::ggml_tensor,
                dst: *mut root::ggml_tensor,
            ),
        >,
        pub cpy_tensor_to: ::std::option::Option<
            unsafe extern "C" fn(
                buffer: root::ggml_backend_buffer_t,
                src: *mut root::ggml_tensor,
                dst: *mut root::ggml_tensor,
            ),
        >,
        pub clear: ::std::option::Option<
            unsafe extern "C" fn(buffer: root::ggml_backend_buffer_t, value: u8),
        >,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_buffer {
        pub iface: root::ggml_backend_buffer_i,
        pub buft: root::ggml_backend_buffer_type_t,
        pub context: root::ggml_backend_buffer_context_t,
        pub size: usize,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend_i {
        pub get_name: ::std::option::Option<
            unsafe extern "C" fn(backend: root::ggml_backend_t) -> *const ::std::os::raw::c_char,
        >,
        pub free: ::std::option::Option<unsafe extern "C" fn(backend: root::ggml_backend_t)>,
        pub get_default_buffer_type: ::std::option::Option<
            unsafe extern "C" fn(backend: root::ggml_backend_t) -> root::ggml_backend_buffer_type_t,
        >,
        pub set_tensor_async: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                tensor: *mut root::ggml_tensor,
                data: *const ::std::os::raw::c_void,
                offset: usize,
                size: usize,
            ),
        >,
        pub get_tensor_async: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                tensor: *const root::ggml_tensor,
                data: *mut ::std::os::raw::c_void,
                offset: usize,
                size: usize,
            ),
        >,
        pub cpy_tensor_from_async: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                src: *mut root::ggml_tensor,
                dst: *mut root::ggml_tensor,
            ),
        >,
        pub cpy_tensor_to_async: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                src: *mut root::ggml_tensor,
                dst: *mut root::ggml_tensor,
            ),
        >,
        pub synchronize: ::std::option::Option<unsafe extern "C" fn(backend: root::ggml_backend_t)>,
        pub graph_plan_create: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                cgraph: *mut root::ggml_cgraph,
            ) -> root::ggml_backend_graph_plan_t,
        >,
        pub graph_plan_free: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                plan: root::ggml_backend_graph_plan_t,
            ),
        >,
        pub graph_plan_compute: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                plan: root::ggml_backend_graph_plan_t,
            ),
        >,
        pub graph_compute: ::std::option::Option<
            unsafe extern "C" fn(backend: root::ggml_backend_t, cgraph: *mut root::ggml_cgraph),
        >,
        pub supports_op: ::std::option::Option<
            unsafe extern "C" fn(
                backend: root::ggml_backend_t,
                op: *const root::ggml_tensor,
            ) -> bool,
        >,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub struct ggml_backend {
        pub iface: root::ggml_backend_i,
        pub context: root::ggml_backend_context_t,
    }
    pub const GGML_FILE_MAGIC: u32 = 1734831468;
    pub const GGML_FILE_VERSION: u32 = 1;
    pub const GGML_QNT_VERSION: u32 = 2;
    pub const GGML_QNT_VERSION_FACTOR: u32 = 1000;
    pub const GGML_MAX_DIMS: u32 = 4;
    pub const GGML_MAX_PARAMS: u32 = 2048;
    pub const GGML_MAX_CONTEXTS: u32 = 64;
    pub const GGML_MAX_SRC: u32 = 10;
    pub const GGML_MAX_NAME: u32 = 64;
    pub const GGML_MAX_OP_PARAMS: u32 = 64;
    pub const GGML_DEFAULT_N_THREADS: u32 = 4;
    pub const GGML_DEFAULT_GRAPH_SIZE: u32 = 2048;
    pub const GGML_MEM_ALIGN: u32 = 16;
    pub const GGML_EXIT_SUCCESS: u32 = 0;
    pub const GGML_EXIT_ABORTED: u32 = 1;
    pub const GGUF_MAGIC: &[u8; 5] = b"GGUF\0";
    pub const GGUF_VERSION: u32 = 3;
    pub const GGUF_DEFAULT_ALIGNMENT: u32 = 32;
    pub const GGML_N_TASKS_MAX: i32 = -1;
    pub const GGML_CUDA_NAME: &[u8; 5] = b"CUDA\0";
    pub const GGML_CUBLAS_NAME: &[u8; 7] = b"cuBLAS\0";
    pub const GGML_CUDA_MAX_DEVICES: u32 = 16;
    pub const GGML_OBJECT_SIZE: usize = 32;
    pub const GGML_TENSOR_SIZE: usize = 368;
    #[test]
    fn bindgen_test_layout_ggml_object() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_object> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_object>(),
            32usize,
            concat!("Size of: ", stringify!(ggml_object))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_object>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_object))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_object),
                "::",
                stringify!(offs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_object),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_object),
                "::",
                stringify!(next)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_object),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_object),
                "::",
                stringify!(padding)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_tensor() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_tensor> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_tensor>(),
            368usize,
            concat!("Size of: ", stringify!(ggml_tensor))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_tensor>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_tensor))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(backend)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(ne)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).nb) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(nb)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(op)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).op_params) as usize - ptr as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(op_params)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).is_param) as usize - ptr as usize },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(is_param)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).grad) as usize - ptr as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(grad)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(src)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(perf_runs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(perf_cycles)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(perf_time_us)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).view_src) as usize - ptr as usize },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(view_src)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).view_offs) as usize - ptr as usize },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(view_offs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(data)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(extra)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_tensor),
                "::",
                stringify!(padding)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_cplan() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_cplan> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_cplan>(),
            40usize,
            concat!("Size of: ", stringify!(ggml_cplan))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_cplan>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_cplan))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).work_size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cplan),
                "::",
                stringify!(work_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).work_data) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cplan),
                "::",
                stringify!(work_data)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cplan),
                "::",
                stringify!(n_threads)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).abort_callback) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cplan),
                "::",
                stringify!(abort_callback)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).abort_callback_data) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cplan),
                "::",
                stringify!(abort_callback_data)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_hash_set() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_hash_set> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_hash_set>(),
            16usize,
            concat!("Size of: ", stringify!(ggml_hash_set))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_hash_set>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_hash_set))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_hash_set),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_hash_set),
                "::",
                stringify!(keys)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_cgraph() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_cgraph> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_cgraph>(),
            80usize,
            concat!("Size of: ", stringify!(ggml_cgraph))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_cgraph>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_cgraph))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_nodes) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(n_nodes)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_leafs) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(n_leafs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(nodes)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).grads) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(grads)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).leafs) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(leafs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).visited_hash_table) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(visited_hash_table)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(order)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(perf_runs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(perf_cycles)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_cgraph),
                "::",
                stringify!(perf_time_us)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_scratch() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_scratch> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_scratch>(),
            24usize,
            concat!("Size of: ", stringify!(ggml_scratch))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_scratch>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_scratch))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_scratch),
                "::",
                stringify!(offs)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_scratch),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_scratch),
                "::",
                stringify!(data)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_init_params() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_init_params> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_init_params>(),
            24usize,
            concat!("Size of: ", stringify!(ggml_init_params))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_init_params>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_init_params))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).mem_size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_init_params),
                "::",
                stringify!(mem_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).mem_buffer) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_init_params),
                "::",
                stringify!(mem_buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).no_alloc) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_init_params),
                "::",
                stringify!(no_alloc)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_compute_params() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_compute_params> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_compute_params>(),
            32usize,
            concat!("Size of: ", stringify!(ggml_compute_params))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_compute_params>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_compute_params))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_compute_params),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ith) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_compute_params),
                "::",
                stringify!(ith)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).nth) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_compute_params),
                "::",
                stringify!(nth)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).wsize) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_compute_params),
                "::",
                stringify!(wsize)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).wdata) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_compute_params),
                "::",
                stringify!(wdata)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_params__bindgen_ty_1() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_1> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_params__bindgen_ty_1>(),
            44usize,
            concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_params__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_1))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(n_iter)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).sched) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(sched)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).decay) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(decay)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).decay_min_ndim) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(decay_min_ndim)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(alpha)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).beta1) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(beta1)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).beta2) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(beta2)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(eps)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).eps_f) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(eps_f)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).eps_g) as usize - ptr as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(eps_g)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).gclip) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_1),
                "::",
                stringify!(gclip)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_params__bindgen_ty_2() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_2> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_params__bindgen_ty_2>(),
            36usize,
            concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_params__bindgen_ty_2>(),
            4usize,
            concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_2))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(m)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(n_iter)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).max_linesearch) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(max_linesearch)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(eps)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ftol) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(ftol)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).wolfe) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(wolfe)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).min_step) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(min_step)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).max_step) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(max_step)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).linesearch) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params__bindgen_ty_2),
                "::",
                stringify!(linesearch)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_params() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_params>(),
            120usize,
            concat!("Size of: ", stringify!(ggml_opt_params))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_params>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_opt_params))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph_size) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(graph_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(n_threads)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).past) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(past)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(delta)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).max_no_improvement) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(max_no_improvement)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).print_forward_graph) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(print_forward_graph)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).print_backward_graph) as usize - ptr as usize },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(print_backward_graph)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_gradient_accumulation) as usize - ptr as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(n_gradient_accumulation)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(adam)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_params),
                "::",
                stringify!(lbfgs)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_context__bindgen_ty_1() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_1> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_context__bindgen_ty_1>(),
            48usize,
            concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_context__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_1))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(g)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(m)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(v)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(pf)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(fx_best)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).fx_prev) as usize - ptr as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(fx_prev)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_1),
                "::",
                stringify!(n_no_improvement)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_context__bindgen_ty_2() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_2> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_context__bindgen_ty_2>(),
            104usize,
            concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_context__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_2))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).xp) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(xp)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(g)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).gp) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(gp)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(d)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(pf)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lmal) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(lmal)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lmys) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(lmys)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lms) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(lms)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lmy) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(lmy)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(fx_best)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(step)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(j)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(k)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context__bindgen_ty_2),
                "::",
                stringify!(n_no_improvement)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_opt_context() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_opt_context>(),
            312usize,
            concat!("Size of: ", stringify!(ggml_opt_context))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_opt_context>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_opt_context))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(ctx)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(params)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).iter) as usize - ptr as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(iter)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).nx) as usize - ptr as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(nx)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).just_initialized) as usize - ptr as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(just_initialized)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).loss_before) as usize - ptr as usize },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(loss_before)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).loss_after) as usize - ptr as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(loss_after)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(adam)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_opt_context),
                "::",
                stringify!(lbfgs)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_init_params() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_init_params> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_init_params>(),
            16usize,
            concat!("Size of: ", stringify!(gguf_init_params))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_init_params>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_init_params))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).no_alloc) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_init_params),
                "::",
                stringify!(no_alloc)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_init_params),
                "::",
                stringify!(ctx)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_type_traits_t() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_type_traits_t> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_type_traits_t>(),
            72usize,
            concat!("Size of: ", stringify!(ggml_type_traits_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_type_traits_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_type_traits_t))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(type_name)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).blck_size) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(blck_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_size) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(type_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).is_quantized) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(is_quantized)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).to_float) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(to_float)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).from_float) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(from_float)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).from_float_reference) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(from_float_reference)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).vec_dot) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(vec_dot)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).vec_dot_type) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_type_traits_t),
                "::",
                stringify!(vec_dot_type)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_graph_copy() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_graph_copy> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_graph_copy>(),
            32usize,
            concat!("Size of: ", stringify!(ggml_backend_graph_copy))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_graph_copy>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_graph_copy))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_graph_copy),
                "::",
                stringify!(buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ctx_allocated) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_graph_copy),
                "::",
                stringify!(ctx_allocated)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ctx_unallocated) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_graph_copy),
                "::",
                stringify!(ctx_unallocated)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_graph_copy),
                "::",
                stringify!(graph)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_context() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_context> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_context>(),
            88usize,
            concat!("Size of: ", stringify!(ggml_context))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_context>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_context))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).mem_size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(mem_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).mem_buffer) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(mem_buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).mem_buffer_owned) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(mem_buffer_owned)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).no_alloc) as usize - ptr as usize },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(no_alloc)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).no_alloc_save) as usize - ptr as usize },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(no_alloc_save)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_objects) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(n_objects)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).objects_begin) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(objects_begin)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).objects_end) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(objects_end)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).scratch) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(scratch)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).scratch_save) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_context),
                "::",
                stringify!(scratch_save)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_str() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_str> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_str>(),
            16usize,
            concat!("Size of: ", stringify!(gguf_str))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_str>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_str))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_str),
                "::",
                stringify!(n)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_str),
                "::",
                stringify!(data)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_value__bindgen_ty_1() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_value__bindgen_ty_1> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_value__bindgen_ty_1>(),
            24usize,
            concat!("Size of: ", stringify!(gguf_value__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_value__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_value__bindgen_ty_1))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value__bindgen_ty_1),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value__bindgen_ty_1),
                "::",
                stringify!(n)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value__bindgen_ty_1),
                "::",
                stringify!(data)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_value() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_value> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_value>(),
            24usize,
            concat!("Size of: ", stringify!(gguf_value))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_value>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_value))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(uint8)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(int8)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).uint16) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(uint16)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(int16)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(uint32)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(int32)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).float32) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(float32)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).uint64) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(uint64)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).int64) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(int64)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).float64) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(float64)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).bool_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(bool_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(str_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).arr) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_value),
                "::",
                stringify!(arr)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_kv() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_kv> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_kv>(),
            48usize,
            concat!("Size of: ", stringify!(gguf_kv))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_kv>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_kv))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_kv),
                "::",
                stringify!(key)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_kv),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_kv),
                "::",
                stringify!(value)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_header() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_header> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_header>(),
            24usize,
            concat!("Size of: ", stringify!(gguf_header))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_header>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_header))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_header),
                "::",
                stringify!(magic)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_header),
                "::",
                stringify!(version)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_tensors) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_header),
                "::",
                stringify!(n_tensors)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_kv) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_header),
                "::",
                stringify!(n_kv)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_tensor_info() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_tensor_info> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_tensor_info>(),
            88usize,
            concat!("Size of: ", stringify!(gguf_tensor_info))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_tensor_info>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_tensor_info))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).n_dims) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(n_dims)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(ne)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(data)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_tensor_info),
                "::",
                stringify!(size)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_gguf_context() {
        const UNINIT: ::std::mem::MaybeUninit<gguf_context> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<gguf_context>(),
            72usize,
            concat!("Size of: ", stringify!(gguf_context))
        );
        assert_eq!(
            ::std::mem::align_of::<gguf_context>(),
            8usize,
            concat!("Alignment of ", stringify!(gguf_context))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(header)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).kv) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(kv)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).infos) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(infos)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(alignment)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(offset)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(gguf_context),
                "::",
                stringify!(data)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_buffer_type_i() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_buffer_type_i> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_buffer_type_i>(),
            40usize,
            concat!("Size of: ", stringify!(ggml_backend_buffer_type_i))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_buffer_type_i>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_buffer_type_i))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).alloc_buffer) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type_i),
                "::",
                stringify!(alloc_buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_alignment) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type_i),
                "::",
                stringify!(get_alignment)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_alloc_size) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type_i),
                "::",
                stringify!(get_alloc_size)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).supports_backend) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type_i),
                "::",
                stringify!(supports_backend)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).is_host) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type_i),
                "::",
                stringify!(is_host)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_buffer_type() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_buffer_type> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_buffer_type>(),
            48usize,
            concat!("Size of: ", stringify!(ggml_backend_buffer_type))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_buffer_type>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_buffer_type))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).iface) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_type),
                "::",
                stringify!(context)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_buffer_i() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_buffer_i> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_buffer_i>(),
            64usize,
            concat!("Size of: ", stringify!(ggml_backend_buffer_i))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_buffer_i>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_buffer_i))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).free_buffer) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(free_buffer)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_base) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(get_base)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).init_tensor) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(init_tensor)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).set_tensor) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(set_tensor)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_tensor) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(get_tensor)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).cpy_tensor_from) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(cpy_tensor_from)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).cpy_tensor_to) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(cpy_tensor_to)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer_i),
                "::",
                stringify!(clear)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_buffer() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_buffer> =
            ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_buffer>(),
            88usize,
            concat!("Size of: ", stringify!(ggml_backend_buffer))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_buffer>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_buffer))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).iface) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).buft) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer),
                "::",
                stringify!(buft)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer),
                "::",
                stringify!(context)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_buffer),
                "::",
                stringify!(size)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend_i() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend_i> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend_i>(),
            104usize,
            concat!("Size of: ", stringify!(ggml_backend_i))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend_i>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend_i))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(get_name)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(free)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_default_buffer_type) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(get_default_buffer_type)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).set_tensor_async) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(set_tensor_async)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).get_tensor_async) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(get_tensor_async)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).cpy_tensor_from_async) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(cpy_tensor_from_async)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).cpy_tensor_to_async) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(cpy_tensor_to_async)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).synchronize) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(synchronize)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph_plan_create) as usize - ptr as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(graph_plan_create)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph_plan_free) as usize - ptr as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(graph_plan_free)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph_plan_compute) as usize - ptr as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(graph_plan_compute)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).graph_compute) as usize - ptr as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(graph_compute)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).supports_op) as usize - ptr as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend_i),
                "::",
                stringify!(supports_op)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ggml_backend() {
        const UNINIT: ::std::mem::MaybeUninit<ggml_backend> = ::std::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::std::mem::size_of::<ggml_backend>(),
            112usize,
            concat!("Size of: ", stringify!(ggml_backend))
        );
        assert_eq!(
            ::std::mem::align_of::<ggml_backend>(),
            8usize,
            concat!("Alignment of ", stringify!(ggml_backend))
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).iface) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend),
                "::",
                stringify!(iface)
            )
        );
        assert_eq!(
            unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ggml_backend),
                "::",
                stringify!(context)
            )
        );
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_type {
        F32 = 0,
        F16 = 1,
        Q4_0 = 2,
        Q4_1 = 3,
        Q5_0 = 6,
        Q5_1 = 7,
        Q8_0 = 8,
        Q8_1 = 9,
        Q2_K = 10,
        Q3_K = 11,
        Q4_K = 12,
        Q5_K = 13,
        Q6_K = 14,
        Q8_K = 15,
        I8 = 16,
        I16 = 17,
        I32 = 18,
        COUNT = 19,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_prec {
        DEFAULT = 0,
        F32 = 1,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_backend_type {
        GGML_BACKEND_CPU = 0,
        GGML_BACKEND_GPU = 10,
        GGML_BACKEND_GPU_SPLIT = 20,
    }
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_ftype {
        UNKNOWN = -1,
        ALL_F32 = 0,
        MOSTLY_F16 = 1,
        MOSTLY_Q4_0 = 2,
        MOSTLY_Q4_1 = 3,
        MOSTLY_Q4_1_SOME_F16 = 4,
        MOSTLY_Q8_0 = 7,
        MOSTLY_Q5_0 = 8,
        MOSTLY_Q5_1 = 9,
        MOSTLY_Q2_K = 10,
        MOSTLY_Q3_K = 11,
        MOSTLY_Q4_K = 12,
        MOSTLY_Q5_K = 13,
        MOSTLY_Q6_K = 14,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_op {
        NONE = 0,
        DUP = 1,
        ADD = 2,
        ADD1 = 3,
        ACC = 4,
        SUB = 5,
        MUL = 6,
        DIV = 7,
        SQR = 8,
        SQRT = 9,
        LOG = 10,
        SUM = 11,
        SUM_ROWS = 12,
        MEAN = 13,
        ARGMAX = 14,
        REPEAT = 15,
        REPEAT_BACK = 16,
        CONCAT = 17,
        SILU_BACK = 18,
        NORM = 19,
        RMS_NORM = 20,
        RMS_NORM_BACK = 21,
        GROUP_NORM = 22,
        MUL_MAT = 23,
        MUL_MAT_ID = 24,
        OUT_PROD = 25,
        SCALE = 26,
        SET = 27,
        CPY = 28,
        CONT = 29,
        RESHAPE = 30,
        VIEW = 31,
        PERMUTE = 32,
        TRANSPOSE = 33,
        GET_ROWS = 34,
        GET_ROWS_BACK = 35,
        DIAG = 36,
        DIAG_MASK_INF = 37,
        DIAG_MASK_ZERO = 38,
        SOFT_MAX = 39,
        SOFT_MAX_BACK = 40,
        ROPE = 41,
        ROPE_BACK = 42,
        ALIBI = 43,
        CLAMP = 44,
        CONV_TRANSPOSE_1D = 45,
        IM2COL = 46,
        CONV_TRANSPOSE_2D = 47,
        POOL_1D = 48,
        POOL_2D = 49,
        UPSCALE = 50,
        PAD = 51,
        ARGSORT = 52,
        LEAKY_RELU = 53,
        FLASH_ATTN = 54,
        FLASH_FF = 55,
        FLASH_ATTN_BACK = 56,
        WIN_PART = 57,
        WIN_UNPART = 58,
        GET_REL_POS = 59,
        ADD_REL_POS = 60,
        UNARY = 61,
        MAP_UNARY = 62,
        MAP_BINARY = 63,
        MAP_CUSTOM1_F32 = 64,
        MAP_CUSTOM2_F32 = 65,
        MAP_CUSTOM3_F32 = 66,
        MAP_CUSTOM1 = 67,
        MAP_CUSTOM2 = 68,
        MAP_CUSTOM3 = 69,
        CROSS_ENTROPY_LOSS = 70,
        CROSS_ENTROPY_LOSS_BACK = 71,
        COUNT = 72,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_unary_op {
        ABS = 0,
        SGN = 1,
        NEG = 2,
        STEP = 3,
        TANH = 4,
        ELU = 5,
        RELU = 6,
        GELU = 7,
        GELU_QUICK = 8,
        SILU = 9,
        COUNT = 10,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_object_type {
        GGML_OBJECT_TENSOR = 0,
        GGML_OBJECT_GRAPH = 1,
        GGML_OBJECT_WORK_BUFFER = 2,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_log_level {
        ERROR = 2,
        WARN = 3,
        INFO = 4,
        DEBUG = 5,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_cgraph_eval_order {
        LEFT_TO_RIGHT = 0,
        RIGHT_TO_LEFT = 1,
        COUNT = 2,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_task_type {
        INIT = 0,
        COMPUTE = 1,
        FINALIZE = 2,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_op_pool {
        MAX = 0,
        AVG = 1,
        COUNT = 2,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_sort_order {
        ASC = 0,
        DESC = 1,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_opt_type {
        GGML_OPT_ADAM = 0,
        GGML_OPT_LBFGS = 1,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_linesearch {
        GGML_LINESEARCH_DEFAULT = 1,
        GGML_LINESEARCH_BACKTRACKING_ARMIJO = 0,
        GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE = 2,
    }
    #[repr(i32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum ggml_opt_result {
        GGML_OPT_OK = 0,
        GGML_OPT_DID_NOT_CONVERGE = 1,
        GGML_OPT_NO_CONTEXT = 2,
        GGML_OPT_INVALID_WOLFE = 3,
        GGML_OPT_FAIL = 4,
        GGML_OPT_CANCEL = 5,
        GGML_LINESEARCH_FAIL = -128,
        GGML_LINESEARCH_MINIMUM_STEP = -127,
        GGML_LINESEARCH_MAXIMUM_STEP = -126,
        GGML_LINESEARCH_MAXIMUM_ITERATIONS = -125,
        GGML_LINESEARCH_INVALID_PARAMETERS = -124,
    }
    #[repr(u32)]
    #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
    pub enum gguf_type {
        UINT8 = 0,
        INT8 = 1,
        UINT16 = 2,
        INT16 = 3,
        UINT32 = 4,
        INT32 = 5,
        FLOAT32 = 6,
        BOOL = 7,
        STRING = 8,
        ARRAY = 9,
        UINT64 = 10,
        INT64 = 11,
        FLOAT64 = 12,
        COUNT = 13,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union gguf_value {
        pub uint8: u8,
        pub int8: i8,
        pub uint16: u16,
        pub int16: i16,
        pub uint32: u32,
        pub int32: i32,
        pub float32: f32,
        pub uint64: u64,
        pub int64: i64,
        pub float64: f64,
        pub bool_: bool,
        pub str_: root::gguf_str,
        pub arr: root::gguf_value__bindgen_ty_1,
    }
    impl root::ggml_linesearch {
        pub const GGML_LINESEARCH_BACKTRACKING_WOLFE: root::ggml_linesearch =
            ggml_linesearch::GGML_LINESEARCH_DEFAULT;
    }
    impl ::std::fmt::Debug for gguf_value {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(f, "gguf_value {{ union }}")
        }
    }
    impl ::std::fmt::Debug for gguf_kv {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            write!(
                f,
                "gguf_kv {{ key: {:?}, type: {:?}, value: {:?} }}",
                self.key, self.type_, self.value
            )
        }
    }
    #[allow(unused_imports)]
    use self::super::root;
    extern "C" {
        pub fn ggml_fp16_to_fp32(x: root::ggml_fp16_t) -> f32;
        pub fn ggml_fp32_to_fp16(x: f32) -> root::ggml_fp16_t;
        pub fn ggml_fp16_to_fp32_row(
            x: *const root::ggml_fp16_t,
            y: *mut f32,
            n: ::std::os::raw::c_int,
        );
        pub fn ggml_fp32_to_fp16_row(
            x: *const f32,
            y: *mut root::ggml_fp16_t,
            n: ::std::os::raw::c_int,
        );
        pub fn ggml_time_init();
        pub fn ggml_time_ms() -> i64;
        pub fn ggml_time_us() -> i64;
        pub fn ggml_cycles() -> i64;
        pub fn ggml_cycles_per_ms() -> i64;
        pub fn ggml_print_backtrace();
        pub fn ggml_numa_init();
        pub fn ggml_is_numa() -> bool;
        pub fn ggml_print_object(obj: *const root::ggml_object);
        pub fn ggml_print_objects(ctx: *const root::ggml_context);
        pub fn ggml_nelements(tensor: *const root::ggml_tensor) -> i64;
        pub fn ggml_nrows(tensor: *const root::ggml_tensor) -> i64;
        pub fn ggml_nbytes(tensor: *const root::ggml_tensor) -> usize;
        pub fn ggml_nbytes_pad(tensor: *const root::ggml_tensor) -> usize;
        pub fn ggml_blck_size(type_: root::ggml_type) -> ::std::os::raw::c_int;
        pub fn ggml_type_size(type_: root::ggml_type) -> usize;
        pub fn ggml_row_size(type_: root::ggml_type, ne: i64) -> usize;
        pub fn ggml_type_sizef(type_: root::ggml_type) -> f64;
        pub fn ggml_type_name(type_: root::ggml_type) -> *const ::std::os::raw::c_char;
        pub fn ggml_op_name(op: root::ggml_op) -> *const ::std::os::raw::c_char;
        pub fn ggml_op_symbol(op: root::ggml_op) -> *const ::std::os::raw::c_char;
        pub fn ggml_unary_op_name(op: root::ggml_unary_op) -> *const ::std::os::raw::c_char;
        pub fn ggml_op_desc(t: *const root::ggml_tensor) -> *const ::std::os::raw::c_char;
        pub fn ggml_element_size(tensor: *const root::ggml_tensor) -> usize;
        pub fn ggml_is_quantized(type_: root::ggml_type) -> bool;
        pub fn ggml_ftype_to_ggml_type(ftype: root::ggml_ftype) -> root::ggml_type;
        pub fn ggml_is_transposed(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_contiguous(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_permuted(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_scalar(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_vector(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_matrix(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_is_3d(tensor: *const root::ggml_tensor) -> bool;
        pub fn ggml_n_dims(tensor: *const root::ggml_tensor) -> ::std::os::raw::c_int;
        pub fn ggml_are_same_shape(
            t0: *const root::ggml_tensor,
            t1: *const root::ggml_tensor,
        ) -> bool;
        pub fn ggml_tensor_overhead() -> usize;
        pub fn ggml_init(params: root::ggml_init_params) -> *mut root::ggml_context;
        pub fn ggml_free(ctx: *mut root::ggml_context);
        pub fn ggml_used_mem(ctx: *const root::ggml_context) -> usize;
        pub fn ggml_set_scratch(ctx: *mut root::ggml_context, scratch: root::ggml_scratch)
            -> usize;
        pub fn ggml_get_no_alloc(ctx: *mut root::ggml_context) -> bool;
        pub fn ggml_set_no_alloc(ctx: *mut root::ggml_context, no_alloc: bool);
        pub fn ggml_get_mem_buffer(ctx: *const root::ggml_context) -> *mut ::std::os::raw::c_void;
        pub fn ggml_get_mem_size(ctx: *const root::ggml_context) -> usize;
        pub fn ggml_get_max_tensor_size(ctx: *const root::ggml_context) -> usize;
        pub fn ggml_new_tensor(
            ctx: *mut root::ggml_context,
            type_: root::ggml_type,
            n_dims: ::std::os::raw::c_int,
            ne: *const i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_new_tensor_1d(
            ctx: *mut root::ggml_context,
            type_: root::ggml_type,
            ne0: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_new_tensor_2d(
            ctx: *mut root::ggml_context,
            type_: root::ggml_type,
            ne0: i64,
            ne1: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_new_tensor_3d(
            ctx: *mut root::ggml_context,
            type_: root::ggml_type,
            ne0: i64,
            ne1: i64,
            ne2: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_new_tensor_4d(
            ctx: *mut root::ggml_context,
            type_: root::ggml_type,
            ne0: i64,
            ne1: i64,
            ne2: i64,
            ne3: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_new_i32(ctx: *mut root::ggml_context, value: i32) -> *mut root::ggml_tensor;
        pub fn ggml_new_f32(ctx: *mut root::ggml_context, value: f32) -> *mut root::ggml_tensor;
        pub fn ggml_dup_tensor(
            ctx: *mut root::ggml_context,
            src: *const root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_view_tensor(
            ctx: *mut root::ggml_context,
            src: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_get_first_tensor(ctx: *const root::ggml_context) -> *mut root::ggml_tensor;
        pub fn ggml_get_next_tensor(
            ctx: *const root::ggml_context,
            tensor: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_get_tensor(
            ctx: *mut root::ggml_context,
            name: *const ::std::os::raw::c_char,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_zero(tensor: *mut root::ggml_tensor) -> *mut root::ggml_tensor;
        pub fn ggml_set_i32(tensor: *mut root::ggml_tensor, value: i32) -> *mut root::ggml_tensor;
        pub fn ggml_set_f32(tensor: *mut root::ggml_tensor, value: f32) -> *mut root::ggml_tensor;
        pub fn ggml_unravel_index(
            tensor: *const root::ggml_tensor,
            i: i64,
            i0: *mut i64,
            i1: *mut i64,
            i2: *mut i64,
            i3: *mut i64,
        );
        pub fn ggml_get_i32_1d(tensor: *const root::ggml_tensor, i: ::std::os::raw::c_int) -> i32;
        pub fn ggml_set_i32_1d(
            tensor: *const root::ggml_tensor,
            i: ::std::os::raw::c_int,
            value: i32,
        );
        pub fn ggml_get_i32_nd(
            tensor: *const root::ggml_tensor,
            i0: ::std::os::raw::c_int,
            i1: ::std::os::raw::c_int,
            i2: ::std::os::raw::c_int,
            i3: ::std::os::raw::c_int,
        ) -> i32;
        pub fn ggml_set_i32_nd(
            tensor: *const root::ggml_tensor,
            i0: ::std::os::raw::c_int,
            i1: ::std::os::raw::c_int,
            i2: ::std::os::raw::c_int,
            i3: ::std::os::raw::c_int,
            value: i32,
        );
        pub fn ggml_get_f32_1d(tensor: *const root::ggml_tensor, i: ::std::os::raw::c_int) -> f32;
        pub fn ggml_set_f32_1d(
            tensor: *const root::ggml_tensor,
            i: ::std::os::raw::c_int,
            value: f32,
        );
        pub fn ggml_get_f32_nd(
            tensor: *const root::ggml_tensor,
            i0: ::std::os::raw::c_int,
            i1: ::std::os::raw::c_int,
            i2: ::std::os::raw::c_int,
            i3: ::std::os::raw::c_int,
        ) -> f32;
        pub fn ggml_set_f32_nd(
            tensor: *const root::ggml_tensor,
            i0: ::std::os::raw::c_int,
            i1: ::std::os::raw::c_int,
            i2: ::std::os::raw::c_int,
            i3: ::std::os::raw::c_int,
            value: f32,
        );
        pub fn ggml_get_data(tensor: *const root::ggml_tensor) -> *mut ::std::os::raw::c_void;
        pub fn ggml_get_data_f32(tensor: *const root::ggml_tensor) -> *mut f32;
        pub fn ggml_get_unary_op(tensor: *const root::ggml_tensor) -> root::ggml_unary_op;
        pub fn ggml_get_name(tensor: *const root::ggml_tensor) -> *const ::std::os::raw::c_char;
        pub fn ggml_set_name(
            tensor: *mut root::ggml_tensor,
            name: *const ::std::os::raw::c_char,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_format_name(
            tensor: *mut root::ggml_tensor,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> *mut root::ggml_tensor;
        pub fn ggml_dup(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_dup_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add_cast(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            type_: root::ggml_type,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add1(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add1_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_acc(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            nb2: usize,
            nb3: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_acc_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            nb2: usize,
            nb3: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sub(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sub_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_mul(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_mul_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_div(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_div_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sqr(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sqr_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sqrt(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sqrt_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_log(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_log_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sum(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sum_rows(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_mean(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_argmax(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_repeat(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_repeat_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_concat(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_abs(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_abs_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sgn(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_sgn_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_neg(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_neg_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_step(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_step_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_tanh(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_tanh_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_elu(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_elu_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_relu(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_leaky_relu(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            negative_slope: f32,
            inplace: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_relu_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_gelu(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_gelu_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_gelu_quick(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_gelu_quick_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_silu(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_silu_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_silu_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_norm(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            eps: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_norm_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            eps: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rms_norm(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            eps: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rms_norm_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            eps: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_group_norm(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_groups: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_group_norm_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_groups: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rms_norm_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            eps: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_mul_mat(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_mul_mat_set_prec(a: *mut root::ggml_tensor, prec: root::ggml_prec);
        pub fn ggml_mul_mat_id(
            ctx: *mut root::ggml_context,
            as_: *const *mut root::ggml_tensor,
            n_as: ::std::os::raw::c_int,
            ids: *mut root::ggml_tensor,
            id: ::std::os::raw::c_int,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_out_prod(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_scale(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            s: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_scale_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            s: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            nb2: usize,
            nb3: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            nb2: usize,
            nb3: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_1d_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_2d_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            nb1: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cpy(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cpy_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont_3d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cont_4d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
            ne3: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_reshape(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_reshape_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_reshape_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_reshape_3d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_reshape_4d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
            ne3: i64,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_view_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_view_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            nb1: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_view_3d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
            nb1: usize,
            nb2: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_view_4d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            ne0: i64,
            ne1: i64,
            ne2: i64,
            ne3: i64,
            nb1: usize,
            nb2: usize,
            nb3: usize,
            offset: usize,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_permute(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            axis0: ::std::os::raw::c_int,
            axis1: ::std::os::raw::c_int,
            axis2: ::std::os::raw::c_int,
            axis3: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_transpose(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_get_rows(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_get_rows_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_diag(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_diag_mask_inf(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_past: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_diag_mask_inf_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_past: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_diag_mask_zero(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_past: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_diag_mask_zero_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_past: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_soft_max(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_soft_max_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_soft_max_ext(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            mask: *mut root::ggml_tensor,
            scale: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_soft_max_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_soft_max_back_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            n_ctx: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            n_ctx: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope_custom(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            n_ctx: ::std::os::raw::c_int,
            n_orig_ctx: ::std::os::raw::c_int,
            freq_base: f32,
            freq_scale: f32,
            ext_factor: f32,
            attn_factor: f32,
            beta_fast: f32,
            beta_slow: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope_custom_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            n_ctx: ::std::os::raw::c_int,
            n_orig_ctx: ::std::os::raw::c_int,
            freq_base: f32,
            freq_scale: f32,
            ext_factor: f32,
            attn_factor: f32,
            beta_fast: f32,
            beta_slow: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope_yarn_corr_dims(
            n_dims: ::std::os::raw::c_int,
            n_orig_ctx: ::std::os::raw::c_int,
            freq_base: f32,
            beta_fast: f32,
            beta_slow: f32,
            dims: *mut f32,
        );
        pub fn ggml_rope_xpos_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            base: f32,
            down: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_rope_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            n_dims: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            n_ctx: ::std::os::raw::c_int,
            n_orig_ctx: ::std::os::raw::c_int,
            freq_base: f32,
            freq_scale: f32,
            ext_factor: f32,
            attn_factor: f32,
            beta_fast: f32,
            beta_slow: f32,
            xpos_base: f32,
            xpos_down: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_alibi(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            n_past: ::std::os::raw::c_int,
            n_head: ::std::os::raw::c_int,
            bias_max: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_clamp(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            min: f32,
            max: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_im2col(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            s0: ::std::os::raw::c_int,
            s1: ::std::os::raw::c_int,
            p0: ::std::os::raw::c_int,
            p1: ::std::os::raw::c_int,
            d0: ::std::os::raw::c_int,
            d1: ::std::os::raw::c_int,
            is_2D: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            s0: ::std::os::raw::c_int,
            p0: ::std::os::raw::c_int,
            d0: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_1d_ph(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            s: ::std::os::raw::c_int,
            d: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_transpose_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            s0: ::std::os::raw::c_int,
            p0: ::std::os::raw::c_int,
            d0: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            s0: ::std::os::raw::c_int,
            s1: ::std::os::raw::c_int,
            p0: ::std::os::raw::c_int,
            p1: ::std::os::raw::c_int,
            d0: ::std::os::raw::c_int,
            d1: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_2d_sk_p0(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_2d_s1_ph(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_conv_transpose_2d_p0(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            stride: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_pool_1d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            op: root::ggml_op_pool,
            k0: ::std::os::raw::c_int,
            s0: ::std::os::raw::c_int,
            p0: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_pool_2d(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            op: root::ggml_op_pool,
            k0: ::std::os::raw::c_int,
            k1: ::std::os::raw::c_int,
            s0: ::std::os::raw::c_int,
            s1: ::std::os::raw::c_int,
            p0: f32,
            p1: f32,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_upscale(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            scale_factor: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_pad(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            p0: ::std::os::raw::c_int,
            p1: ::std::os::raw::c_int,
            p2: ::std::os::raw::c_int,
            p3: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_argsort(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            order: root::ggml_sort_order,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_top_k(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            k: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_flash_attn(
            ctx: *mut root::ggml_context,
            q: *mut root::ggml_tensor,
            k: *mut root::ggml_tensor,
            v: *mut root::ggml_tensor,
            masked: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_flash_attn_back(
            ctx: *mut root::ggml_context,
            q: *mut root::ggml_tensor,
            k: *mut root::ggml_tensor,
            v: *mut root::ggml_tensor,
            d: *mut root::ggml_tensor,
            masked: bool,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_flash_ff(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b0: *mut root::ggml_tensor,
            b1: *mut root::ggml_tensor,
            c0: *mut root::ggml_tensor,
            c1: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_win_part(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            w: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_win_unpart(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            w0: ::std::os::raw::c_int,
            h0: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_unary(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            op: root::ggml_unary_op,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_unary_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            op: root::ggml_unary_op,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_get_rel_pos(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            qh: ::std::os::raw::c_int,
            kh: ::std::os::raw::c_int,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add_rel_pos(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            pw: *mut root::ggml_tensor,
            ph: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_add_rel_pos_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            pw: *mut root::ggml_tensor,
            ph: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_unary_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_unary_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_unary_inplace_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_unary_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_binary_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_binary_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_binary_inplace_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_binary_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom1_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_custom1_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom1_inplace_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_custom1_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom2_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_custom2_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom2_inplace_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_custom2_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom3_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
            fun: root::ggml_custom3_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom3_inplace_f32(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
            fun: root::ggml_custom3_op_f32_t,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom1(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_custom1_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom1_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            fun: root::ggml_custom1_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom2(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_custom2_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom2_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            fun: root::ggml_custom2_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom3(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
            fun: root::ggml_custom3_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_map_custom3_inplace(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
            fun: root::ggml_custom3_op_t,
            n_tasks: ::std::os::raw::c_int,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cross_entropy_loss(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_cross_entropy_loss_back(
            ctx: *mut root::ggml_context,
            a: *mut root::ggml_tensor,
            b: *mut root::ggml_tensor,
            c: *mut root::ggml_tensor,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_set_param(ctx: *mut root::ggml_context, tensor: *mut root::ggml_tensor);
        pub fn ggml_build_forward_expand(
            cgraph: *mut root::ggml_cgraph,
            tensor: *mut root::ggml_tensor,
        );
        pub fn ggml_build_backward_expand(
            ctx: *mut root::ggml_context,
            gf: *mut root::ggml_cgraph,
            gb: *mut root::ggml_cgraph,
            keep: bool,
        );
        pub fn ggml_new_graph(ctx: *mut root::ggml_context) -> *mut root::ggml_cgraph;
        pub fn ggml_new_graph_custom(
            ctx: *mut root::ggml_context,
            size: usize,
            grads: bool,
        ) -> *mut root::ggml_cgraph;
        pub fn ggml_graph_dup(
            ctx: *mut root::ggml_context,
            cgraph: *mut root::ggml_cgraph,
        ) -> *mut root::ggml_cgraph;
        pub fn ggml_graph_view(
            cgraph: *mut root::ggml_cgraph,
            i0: ::std::os::raw::c_int,
            i1: ::std::os::raw::c_int,
        ) -> root::ggml_cgraph;
        pub fn ggml_graph_cpy(src: *mut root::ggml_cgraph, dst: *mut root::ggml_cgraph);
        pub fn ggml_graph_reset(cgraph: *mut root::ggml_cgraph);
        pub fn ggml_graph_clear(cgraph: *mut root::ggml_cgraph);
        pub fn ggml_graph_overhead() -> usize;
        pub fn ggml_graph_overhead_custom(size: usize, grads: bool) -> usize;
        pub fn ggml_graph_plan(
            cgraph: *mut root::ggml_cgraph,
            n_threads: ::std::os::raw::c_int,
        ) -> root::ggml_cplan;
        pub fn ggml_graph_compute(
            cgraph: *mut root::ggml_cgraph,
            cplan: *mut root::ggml_cplan,
        ) -> ::std::os::raw::c_int;
        pub fn ggml_graph_compute_with_ctx(
            ctx: *mut root::ggml_context,
            cgraph: *mut root::ggml_cgraph,
            n_threads: ::std::os::raw::c_int,
        );
        pub fn ggml_graph_get_tensor(
            cgraph: *mut root::ggml_cgraph,
            name: *const ::std::os::raw::c_char,
        ) -> *mut root::ggml_tensor;
        pub fn ggml_graph_export(
            cgraph: *const root::ggml_cgraph,
            fname: *const ::std::os::raw::c_char,
        );
        pub fn ggml_graph_import(
            fname: *const ::std::os::raw::c_char,
            ctx_data: *mut *mut root::ggml_context,
            ctx_eval: *mut *mut root::ggml_context,
        ) -> *mut root::ggml_cgraph;
        pub fn ggml_graph_print(cgraph: *const root::ggml_cgraph);
        pub fn ggml_graph_dump_dot(
            gb: *const root::ggml_cgraph,
            gf: *const root::ggml_cgraph,
            filename: *const ::std::os::raw::c_char,
        );
        pub fn ggml_build_backward_gradient_checkpointing(
            ctx: *mut root::ggml_context,
            gf: *mut root::ggml_cgraph,
            gb: *mut root::ggml_cgraph,
            gb_tmp: *mut root::ggml_cgraph,
            checkpoints: *mut *mut root::ggml_tensor,
            n_checkpoints: ::std::os::raw::c_int,
        );
        pub fn ggml_opt_default_params(type_: root::ggml_opt_type) -> root::ggml_opt_params;
        pub fn ggml_opt(
            ctx: *mut root::ggml_context,
            params: root::ggml_opt_params,
            f: *mut root::ggml_tensor,
        ) -> root::ggml_opt_result;
        pub fn ggml_opt_init(
            ctx: *mut root::ggml_context,
            opt: *mut root::ggml_opt_context,
            params: root::ggml_opt_params,
            nx: i64,
        );
        pub fn ggml_opt_resume(
            ctx: *mut root::ggml_context,
            opt: *mut root::ggml_opt_context,
            f: *mut root::ggml_tensor,
        ) -> root::ggml_opt_result;
        pub fn ggml_opt_resume_g(
            ctx: *mut root::ggml_context,
            opt: *mut root::ggml_opt_context,
            f: *mut root::ggml_tensor,
            gf: *mut root::ggml_cgraph,
            gb: *mut root::ggml_cgraph,
            callback: root::ggml_opt_callback,
            callback_data: *mut ::std::os::raw::c_void,
        ) -> root::ggml_opt_result;
        pub fn ggml_quantize_q4_0(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q4_1(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q5_0(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q5_1(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q8_0(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q2_K(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q3_K(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q4_K(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q5_K(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_q6_K(
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            k: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn ggml_quantize_chunk(
            type_: root::ggml_type,
            src: *const f32,
            dst: *mut ::std::os::raw::c_void,
            start: ::std::os::raw::c_int,
            n: ::std::os::raw::c_int,
            hist: *mut i64,
        ) -> usize;
        pub fn gguf_init_empty() -> *mut root::gguf_context;
        pub fn gguf_init_from_file(
            fname: *const ::std::os::raw::c_char,
            params: root::gguf_init_params,
        ) -> *mut root::gguf_context;
        pub fn gguf_free(ctx: *mut root::gguf_context);
        pub fn gguf_type_name(type_: root::gguf_type) -> *const ::std::os::raw::c_char;
        pub fn gguf_get_version(ctx: *const root::gguf_context) -> ::std::os::raw::c_int;
        pub fn gguf_get_alignment(ctx: *const root::gguf_context) -> usize;
        pub fn gguf_get_data_offset(ctx: *const root::gguf_context) -> usize;
        pub fn gguf_get_data(ctx: *const root::gguf_context) -> *mut ::std::os::raw::c_void;
        pub fn gguf_get_n_kv(ctx: *const root::gguf_context) -> ::std::os::raw::c_int;
        pub fn gguf_find_key(
            ctx: *const root::gguf_context,
            key: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
        pub fn gguf_get_key(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char;
        pub fn gguf_get_kv_type(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> root::gguf_type;
        pub fn gguf_get_arr_type(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> root::gguf_type;
        pub fn gguf_get_val_u8(ctx: *const root::gguf_context, key_id: ::std::os::raw::c_int)
            -> u8;
        pub fn gguf_get_val_i8(ctx: *const root::gguf_context, key_id: ::std::os::raw::c_int)
            -> i8;
        pub fn gguf_get_val_u16(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> u16;
        pub fn gguf_get_val_i16(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> i16;
        pub fn gguf_get_val_u32(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> u32;
        pub fn gguf_get_val_i32(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> i32;
        pub fn gguf_get_val_f32(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> f32;
        pub fn gguf_get_val_u64(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> u64;
        pub fn gguf_get_val_i64(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> i64;
        pub fn gguf_get_val_f64(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> f64;
        pub fn gguf_get_val_bool(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> bool;
        pub fn gguf_get_val_str(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char;
        pub fn gguf_get_val_data(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void;
        pub fn gguf_get_arr_n(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
        pub fn gguf_get_arr_data(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void;
        pub fn gguf_get_arr_str(
            ctx: *const root::gguf_context,
            key_id: ::std::os::raw::c_int,
            i: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char;
        pub fn gguf_get_n_tensors(ctx: *const root::gguf_context) -> ::std::os::raw::c_int;
        pub fn gguf_find_tensor(
            ctx: *const root::gguf_context,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
        pub fn gguf_get_tensor_offset(
            ctx: *const root::gguf_context,
            i: ::std::os::raw::c_int,
        ) -> usize;
        pub fn gguf_get_tensor_name(
            ctx: *const root::gguf_context,
            i: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
        pub fn gguf_get_tensor_type(
            ctx: *const root::gguf_context,
            i: ::std::os::raw::c_int,
        ) -> root::ggml_type;
        pub fn gguf_set_val_u8(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: u8,
        );
        pub fn gguf_set_val_i8(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: i8,
        );
        pub fn gguf_set_val_u16(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: u16,
        );
        pub fn gguf_set_val_i16(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: i16,
        );
        pub fn gguf_set_val_u32(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: u32,
        );
        pub fn gguf_set_val_i32(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: i32,
        );
        pub fn gguf_set_val_f32(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: f32,
        );
        pub fn gguf_set_val_u64(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: u64,
        );
        pub fn gguf_set_val_i64(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: i64,
        );
        pub fn gguf_set_val_f64(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: f64,
        );
        pub fn gguf_set_val_bool(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: bool,
        );
        pub fn gguf_set_val_str(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            val: *const ::std::os::raw::c_char,
        );
        pub fn gguf_set_arr_data(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            type_: root::gguf_type,
            data: *const ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
        );
        pub fn gguf_set_arr_str(
            ctx: *mut root::gguf_context,
            key: *const ::std::os::raw::c_char,
            data: *mut *const ::std::os::raw::c_char,
            n: ::std::os::raw::c_int,
        );
        pub fn gguf_set_kv(ctx: *mut root::gguf_context, src: *mut root::gguf_context);
        pub fn gguf_add_tensor(ctx: *mut root::gguf_context, tensor: *const root::ggml_tensor);
        pub fn gguf_set_tensor_type(
            ctx: *mut root::gguf_context,
            name: *const ::std::os::raw::c_char,
            type_: root::ggml_type,
        );
        pub fn gguf_set_tensor_data(
            ctx: *mut root::gguf_context,
            name: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            size: usize,
        );
        pub fn gguf_write_to_file(
            ctx: *const root::gguf_context,
            fname: *const ::std::os::raw::c_char,
            only_meta: bool,
        );
        pub fn gguf_get_meta_size(ctx: *const root::gguf_context) -> usize;
        pub fn gguf_get_meta_data(
            ctx: *const root::gguf_context,
            data: *mut ::std::os::raw::c_void,
        );
        pub fn ggml_cpu_has_avx() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_avx2() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_avx512() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_avx512_vbmi() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_avx512_vnni() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_fma() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_neon() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_arm_fma() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_metal() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_f16c() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_fp16_va() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_wasm_simd() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_blas() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_cublas() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_clblast() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_gpublas() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_sse3() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_ssse3() -> ::std::os::raw::c_int;
        pub fn ggml_cpu_has_vsx() -> ::std::os::raw::c_int;
        pub fn ggml_internal_get_type_traits(type_: root::ggml_type) -> root::ggml_type_traits_t;
        pub fn ggml_allocr_new(
            data: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> root::ggml_allocr_t;
        pub fn ggml_allocr_new_measure(alignment: usize) -> root::ggml_allocr_t;
        pub fn ggml_allocr_new_from_buffer(
            buffer: *mut root::ggml_backend_buffer,
        ) -> root::ggml_allocr_t;
        pub fn ggml_allocr_new_from_backend(
            backend: *mut root::ggml_backend,
            size: usize,
        ) -> root::ggml_allocr_t;
        pub fn ggml_allocr_new_measure_from_backend(
            backend: *mut root::ggml_backend,
        ) -> root::ggml_allocr_t;
        pub fn ggml_allocr_get_buffer(alloc: root::ggml_allocr_t)
            -> *mut root::ggml_backend_buffer;
        pub fn ggml_allocr_set_parse_seq(
            alloc: root::ggml_allocr_t,
            list: *const ::std::os::raw::c_int,
            n: ::std::os::raw::c_int,
        );
        pub fn ggml_allocr_free(alloc: root::ggml_allocr_t);
        pub fn ggml_allocr_is_measure(alloc: root::ggml_allocr_t) -> bool;
        pub fn ggml_allocr_reset(alloc: root::ggml_allocr_t);
        pub fn ggml_allocr_alloc(alloc: root::ggml_allocr_t, tensor: *mut root::ggml_tensor);
        pub fn ggml_allocr_max_size(alloc: root::ggml_allocr_t) -> usize;
        pub fn ggml_allocr_alloc_graph(
            alloc: root::ggml_allocr_t,
            graph: *mut root::ggml_cgraph,
        ) -> usize;
        pub fn ggml_tallocr_new(
            data: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> root::ggml_tallocr_t;
        pub fn ggml_tallocr_new_measure(alignment: usize) -> root::ggml_tallocr_t;
        pub fn ggml_tallocr_new_from_buffer(
            buffer: *mut root::ggml_backend_buffer,
        ) -> root::ggml_tallocr_t;
        pub fn ggml_tallocr_new_from_backend(
            backend: *mut root::ggml_backend,
            size: usize,
        ) -> root::ggml_tallocr_t;
        pub fn ggml_tallocr_new_measure_from_backend(
            backend: *mut root::ggml_backend,
        ) -> root::ggml_tallocr_t;
        pub fn ggml_tallocr_get_buffer(
            talloc: root::ggml_tallocr_t,
        ) -> *mut root::ggml_backend_buffer;
        pub fn ggml_tallocr_free(talloc: root::ggml_tallocr_t);
        pub fn ggml_tallocr_is_measure(talloc: root::ggml_tallocr_t) -> bool;
        pub fn ggml_tallocr_reset(talloc: root::ggml_tallocr_t);
        pub fn ggml_tallocr_alloc(talloc: root::ggml_tallocr_t, tensor: *mut root::ggml_tensor);
        pub fn ggml_tallocr_max_size(talloc: root::ggml_tallocr_t) -> usize;
        pub fn ggml_gallocr_new() -> root::ggml_gallocr_t;
        pub fn ggml_gallocr_free(galloc: root::ggml_gallocr_t);
        pub fn ggml_gallocr_set_parse_seq(
            galloc: root::ggml_gallocr_t,
            list: *const ::std::os::raw::c_int,
            n: ::std::os::raw::c_int,
        );
        pub fn ggml_gallocr_alloc_graph(
            galloc: root::ggml_gallocr_t,
            talloc: root::ggml_tallocr_t,
            graph: *mut root::ggml_cgraph,
        ) -> usize;
        pub fn ggml_gallocr_alloc_graph_n(
            galloc: root::ggml_gallocr_t,
            graph: *mut root::ggml_cgraph,
            hash_set: root::ggml_hash_set,
            hash_node_talloc: *mut root::ggml_tallocr_t,
        );
        pub fn ggml_backend_alloc_ctx_tensors_from_buft(
            ctx: *mut root::ggml_context,
            buft: *mut root::ggml_backend_buffer_type,
        ) -> *mut root::ggml_backend_buffer;
        pub fn ggml_backend_alloc_ctx_tensors(
            ctx: *mut root::ggml_context,
            backend: *mut root::ggml_backend,
        ) -> *mut root::ggml_backend_buffer;
        pub fn ggml_backend_buft_alloc_buffer(
            buft: root::ggml_backend_buffer_type_t,
            size: usize,
        ) -> root::ggml_backend_buffer_t;
        pub fn ggml_backend_buft_get_alignment(buft: root::ggml_backend_buffer_type_t) -> usize;
        pub fn ggml_backend_buft_get_alloc_size(
            buft: root::ggml_backend_buffer_type_t,
            tensor: *mut root::ggml_tensor,
        ) -> usize;
        pub fn ggml_backend_buft_supports_backend(
            buft: root::ggml_backend_buffer_type_t,
            backend: root::ggml_backend_t,
        ) -> bool;
        pub fn ggml_backend_buft_is_host(buft: root::ggml_backend_buffer_type_t) -> bool;
        pub fn ggml_backend_buffer_free(buffer: root::ggml_backend_buffer_t);
        pub fn ggml_backend_buffer_get_base(
            buffer: root::ggml_backend_buffer_t,
        ) -> *mut ::std::os::raw::c_void;
        pub fn ggml_backend_buffer_get_size(buffer: root::ggml_backend_buffer_t) -> usize;
        pub fn ggml_backend_buffer_init_tensor(
            buffer: root::ggml_backend_buffer_t,
            tensor: *mut root::ggml_tensor,
        );
        pub fn ggml_backend_buffer_get_alignment(buffer: root::ggml_backend_buffer_t) -> usize;
        pub fn ggml_backend_buffer_get_alloc_size(
            buffer: root::ggml_backend_buffer_t,
            tensor: *mut root::ggml_tensor,
        ) -> usize;
        pub fn ggml_backend_buffer_clear(buffer: root::ggml_backend_buffer_t, value: u8);
        pub fn ggml_backend_buffer_is_host(buffer: root::ggml_backend_buffer_t) -> bool;
        pub fn ggml_backend_buffer_type(
            buffer: root::ggml_backend_buffer_t,
        ) -> root::ggml_backend_buffer_type_t;
        pub fn ggml_backend_name(backend: root::ggml_backend_t) -> *const ::std::os::raw::c_char;
        pub fn ggml_backend_free(backend: root::ggml_backend_t);
        pub fn ggml_backend_get_default_buffer_type(
            backend: root::ggml_backend_t,
        ) -> root::ggml_backend_buffer_type_t;
        pub fn ggml_backend_alloc_buffer(
            backend: root::ggml_backend_t,
            size: usize,
        ) -> root::ggml_backend_buffer_t;
        pub fn ggml_backend_get_alignment(backend: root::ggml_backend_t) -> usize;
        pub fn ggml_backend_tensor_set_async(
            backend: root::ggml_backend_t,
            tensor: *mut root::ggml_tensor,
            data: *const ::std::os::raw::c_void,
            offset: usize,
            size: usize,
        );
        pub fn ggml_backend_tensor_get_async(
            backend: root::ggml_backend_t,
            tensor: *const root::ggml_tensor,
            data: *mut ::std::os::raw::c_void,
            offset: usize,
            size: usize,
        );
        pub fn ggml_backend_tensor_set(
            tensor: *mut root::ggml_tensor,
            data: *const ::std::os::raw::c_void,
            offset: usize,
            size: usize,
        );
        pub fn ggml_backend_tensor_get(
            tensor: *const root::ggml_tensor,
            data: *mut ::std::os::raw::c_void,
            offset: usize,
            size: usize,
        );
        pub fn ggml_backend_synchronize(backend: root::ggml_backend_t);
        pub fn ggml_backend_graph_plan_create(
            backend: root::ggml_backend_t,
            cgraph: *mut root::ggml_cgraph,
        ) -> root::ggml_backend_graph_plan_t;
        pub fn ggml_backend_graph_plan_free(
            backend: root::ggml_backend_t,
            plan: root::ggml_backend_graph_plan_t,
        );
        pub fn ggml_backend_graph_plan_compute(
            backend: root::ggml_backend_t,
            plan: root::ggml_backend_graph_plan_t,
        );
        pub fn ggml_backend_graph_compute(
            backend: root::ggml_backend_t,
            cgraph: *mut root::ggml_cgraph,
        );
        pub fn ggml_backend_supports_op(
            backend: root::ggml_backend_t,
            op: *const root::ggml_tensor,
        ) -> bool;
        pub fn ggml_backend_tensor_copy(src: *mut root::ggml_tensor, dst: *mut root::ggml_tensor);
        pub fn ggml_backend_tensor_copy_async(
            backend: root::ggml_backend_t,
            src: *mut root::ggml_tensor,
            dst: *mut root::ggml_tensor,
        );
        pub fn ggml_backend_cpu_init() -> root::ggml_backend_t;
        pub fn ggml_backend_is_cpu(backend: root::ggml_backend_t) -> bool;
        pub fn ggml_backend_cpu_set_n_threads(
            backend_cpu: root::ggml_backend_t,
            n_threads: ::std::os::raw::c_int,
        );
        pub fn ggml_backend_cpu_buffer_from_ptr(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> root::ggml_backend_buffer_t;
        pub fn ggml_backend_cpu_buffer_type() -> root::ggml_backend_buffer_type_t;
        pub fn ggml_backend_reg_get_count() -> usize;
        pub fn ggml_backend_reg_find_by_name(name: *const ::std::os::raw::c_char) -> usize;
        pub fn ggml_backend_reg_init_backend_from_str(
            backend_str: *const ::std::os::raw::c_char,
        ) -> root::ggml_backend_t;
        pub fn ggml_backend_reg_get_name(i: usize) -> *const ::std::os::raw::c_char;
        pub fn ggml_backend_reg_init_backend(
            i: usize,
            params: *const ::std::os::raw::c_char,
        ) -> root::ggml_backend_t;
        pub fn ggml_backend_reg_get_default_buffer_type(
            i: usize,
        ) -> root::ggml_backend_buffer_type_t;
        pub fn ggml_backend_reg_alloc_buffer(i: usize, size: usize) -> root::ggml_backend_buffer_t;
        pub fn ggml_backend_sched_new(
            backends: *mut root::ggml_backend_t,
            n_backends: ::std::os::raw::c_int,
        ) -> root::ggml_backend_sched_t;
        pub fn ggml_backend_sched_free(sched: root::ggml_backend_sched_t);
        pub fn ggml_backend_sched_init_measure(
            sched: root::ggml_backend_sched_t,
            measure_graph: *mut root::ggml_cgraph,
        );
        pub fn ggml_backend_sched_get_tallocr(
            sched: root::ggml_backend_sched_t,
            backend: root::ggml_backend_t,
        ) -> root::ggml_tallocr_t;
        pub fn ggml_backend_sched_get_buffer(
            sched: root::ggml_backend_sched_t,
            backend: root::ggml_backend_t,
        ) -> root::ggml_backend_buffer_t;
        pub fn ggml_backend_sched_set_node_backend(
            sched: root::ggml_backend_sched_t,
            node: *mut root::ggml_tensor,
            backend: root::ggml_backend_t,
        );
        pub fn ggml_backend_sched_graph_compute(
            sched: root::ggml_backend_sched_t,
            graph: *mut root::ggml_cgraph,
        );
        pub fn ggml_backend_graph_copy(
            backend: root::ggml_backend_t,
            graph: *mut root::ggml_cgraph,
        ) -> root::ggml_backend_graph_copy;
        pub fn ggml_backend_graph_copy_free(copy: root::ggml_backend_graph_copy);
        pub fn ggml_backend_compare_graph_backend(
            backend1: root::ggml_backend_t,
            backend2: root::ggml_backend_t,
            graph: *mut root::ggml_cgraph,
            callback: root::ggml_backend_eval_callback,
            user_data: *mut ::std::os::raw::c_void,
        );
        pub fn ggml_backend_tensor_alloc(
            buffer: root::ggml_backend_buffer_t,
            tensor: *mut root::ggml_tensor,
            addr: *mut ::std::os::raw::c_void,
        );
        pub fn ggml_backend_view_init(
            buffer: root::ggml_backend_buffer_t,
            tensor: *mut root::ggml_tensor,
        );
        pub fn ggml_init_cublas();
        pub fn ggml_cublas_loaded() -> bool;
        pub fn ggml_cuda_host_malloc(size: usize) -> *mut ::std::os::raw::c_void;
        pub fn ggml_cuda_host_free(ptr: *mut ::std::os::raw::c_void);
        pub fn ggml_cuda_can_mul_mat(
            src0: *const root::ggml_tensor,
            src1: *const root::ggml_tensor,
            dst: *mut root::ggml_tensor,
        ) -> bool;
        pub fn ggml_cuda_set_tensor_split(tensor_split: *const f32);
        pub fn ggml_cuda_transform_tensor(
            data: *mut ::std::os::raw::c_void,
            tensor: *mut root::ggml_tensor,
        );
        pub fn ggml_cuda_free_data(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_assign_buffers(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_assign_buffers_no_scratch(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_assign_buffers_force_inplace(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_assign_buffers_no_alloc(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_assign_scratch_offset(tensor: *mut root::ggml_tensor, offset: usize);
        pub fn ggml_cuda_copy_to_device(tensor: *mut root::ggml_tensor);
        pub fn ggml_cuda_set_main_device(main_device: ::std::os::raw::c_int);
        pub fn ggml_cuda_set_mul_mat_q(mul_mat_q: bool);
        pub fn ggml_cuda_set_scratch_size(scratch_size: usize);
        pub fn ggml_cuda_free_scratch();
        pub fn ggml_cuda_compute_forward(
            params: *mut root::ggml_compute_params,
            tensor: *mut root::ggml_tensor,
        ) -> bool;
        pub fn ggml_cuda_get_device_count() -> ::std::os::raw::c_int;
        pub fn ggml_cuda_get_device_description(
            device: ::std::os::raw::c_int,
            description: *mut ::std::os::raw::c_char,
            description_size: usize,
        );
        pub fn ggml_backend_cuda_init(device: ::std::os::raw::c_int) -> root::ggml_backend_t;
        pub fn ggml_backend_is_cuda(backend: root::ggml_backend_t) -> bool;
        pub fn ggml_backend_cuda_get_device(backend: root::ggml_backend_t)
            -> ::std::os::raw::c_int;
        pub fn ggml_backend_cuda_buffer_type(
            device: ::std::os::raw::c_int,
        ) -> root::ggml_backend_buffer_type_t;
        pub fn ggml_backend_cuda_host_buffer_type() -> root::ggml_backend_buffer_type_t;
    }
}
